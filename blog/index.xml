<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on The Jorney of Wayne</title><link>https://blog.wayne.wiki/blog/</link><description>Recent content in Blog on The Jorney of Wayne</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 07 Jun 2021 01:31:19 +0000</lastBuildDate><atom:link href="https://blog.wayne.wiki/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Auto-scaling process is slow on Amazon EKS with NLB</title><link>https://blog.wayne.wiki/blog/2021/06/auto-scaling-process-is-slow-on-amazon-eks-with-nlb/</link><pubDate>Mon, 07 Jun 2021 01:31:19 +0000</pubDate><guid>https://blog.wayne.wiki/blog/2021/06/auto-scaling-process-is-slow-on-amazon-eks-with-nlb/</guid><description>Background One of my customers wants to build the workloads on Amazon EKS, and plan to leverage Pod AutoScaler to automatically scale the number of pods in a deployment. The LoadBalancer type ahead the target group is NLB (Network Load Balancer) in their use case.
Ingress traffic to Amazon EKS Customer expects the registration flow of new target should be soon (less than one minute), but the real situation is that it takes minutes before the new provisioned Pod can start to serve traffic.</description></item><item><title>炸牛排初體驗</title><link>https://blog.wayne.wiki/blog/2021/06/japan-style-fried-steak/</link><pubDate>Sun, 06 Jun 2021 14:00:00 +0000</pubDate><guid>https://blog.wayne.wiki/blog/2021/06/japan-style-fried-steak/</guid><description>因為疫情關係，大概已經三個多禮拜沒出門了，出門也是種風險，所以頂多就一個星期出門個 1~2 次買一些生鮮蔬果，畢竟這東西沒辦法一次買很多冰著。朋友們的動態或是發文也大多都是今天又煮了些什麼，連 Facebook 的推薦廣告都充斥著賣肉或是賣海鮮的文宣。
但對比我過往的日子，好像也沒有差太多，本來就有自己煮東西來吃的習慣， work from home 以後，少了通勤的時間，反而有更多的時間可以用來煮飯，也因為要減少出門，自己煮飯的頻率也變高了。
在家煮飯還是盡量力求多變化，每一餐幾乎都是不同的食物，但有時候吃久了還是會懷念一些在餐廳才可以吃到、略微麻煩的食物，於是就誕生了這道日式炸牛排了。
第一次吃到炸牛排是前幾個月疫情還沒爆發前的同事聚餐，那次吃了 A13 的炸牛元村，吃完後有點驚為天人的感覺，原來牛排用炸的也是挺好吃的，外層裹著一層麵包粉的酥脆外殼，但裡面又鮮嫩多汁，是兩種截然不同的口感。
趁有空時，索性來研究一下怎麼在家炸牛排，看了幾份食譜後，其實也沒想像中的難，需要的材料就是牛排、麵粉、雞蛋跟麵包粉而已，除了麵包粉以外，上面這些食材應該都是很多家庭常備有的食物。而麵包粉其實在一般超市也挺好買到的，如果擔心買了用不完，也可以將一般土司烤脆了以後用食物調理機打碎，就變成好用的麵包粉了。
這次用的肉是很便宜的嫩肩里肌，就是一般在好市多中可以看到中間有粗粗一條筋的那種牛排。如果是自己買整條回來切的話，一公斤才 300、400 元。這個部分如果好好分割的話，把筋膜跟中間的筋去掉，其實是可以變成一塊僅次於菲力柔軟的平鐵牛排 (flat iron steak)。
開始炸牛排前，要先準備幾個可以容納下你牛排大小的容器，分別放入麵粉、蛋液以及麵包粉。然後就依序先沾一層薄薄的麵粉，接著稍微裹上一層蛋液後，再放入麵包粉中讓他沾上酥脆的外殼。沾麵包粉時要注意，沾完後不要急著要下油鍋炸，而是先讓他在旁靜置一下，讓麵包粉可以跟肉結合的更緊密。都有一鍋油了，總是要想辦法讓他效益最大化，當然順便炸個櫛瓜。櫛瓜只需要裹上蛋液跟麵粉就好了，不需要額外的麵包粉，櫛瓜用炸的真的無敵霹靂好吃，酥脆的麵衣，裡面是熟透的多汁柔軟。牛排吃起來感覺跟外面賣的炸牛排吃起來也沒相差太多，看來可以變成家常菜了。
整道料理最麻煩的東西我會說是那鍋油，畢竟在一般家庭中不會常常在炸東西，那鍋油只用一次也浪費，而用完後要如何處理更是麻煩。但幾年前在大創發現了一個好物，叫做廢油處理劑，49 元裡面好像有 4 ~ 5 包可以用。在炸完東西趁油還熱時把這個東西倒進去攪一攪，等油冷掉以後他會變成一大塊類似肥皂的白色物體，接著就可以把整塊挖出來丟進垃圾桶了。</description></item><item><title>淺漬梅酒</title><link>https://blog.wayne.wiki/blog/2021/06/home-made-umeshu/</link><pubDate>Sun, 06 Jun 2021 09:25:30 +0000</pubDate><guid>https://blog.wayne.wiki/blog/2021/06/home-made-umeshu/</guid><description>今年不知道看到了什麼，突然就想做個淺漬梅酒，為了泡酒，還特別研究了一下各種瓶子的差異，最後決定買了星硝(Seisho) 的玻璃提瓶，不過台灣都很貴，就直接從日亞下單了，加上運費還比台灣便宜一些。
梅子的部份，今年聽說因為台灣沒什麼下雨，所以梅子也都特別小顆，單價上也比較高。在網路上找了一下，價格從 40 幾到 100 多塊都有看到。不過因為泡的量也不大，最後選擇了一間價格相對高 (95元/斤)，但是評價不錯的店買了 7 斤來泡酒。收到時是覺得品項還不錯啦，但貴是不是有貴的價值，只能等釀好才知道了。 Wines 這次用的酒有 Vodka、Whisky、Sake 以及 Gin。當中最貴的應該就那瓶 Roku Gin 了，一瓶 700ml 要價快 800 元。Roku Gin 跟另一瓶好市多最便宜的 Gin 相比之下，在香氣的確是不一樣，雖然還是可以聞到濃烈的酒精味，但可以喝得出來這瓶酒當初在釀的時候的確有花了一點功夫。官網上的介紹是這樣說的 ROKU在日文裡代表著「六」，六（ROKU）使用了6種經典的日本植物：櫻花、櫻花葉、日本柚子皮、煎茶、玉露，日本山椒。應該會是個純飲也很厲害的酒，只是被拿來釀梅酒就不知道會不會太浪費了。
結果釀完 4.5 桶酒後，發現剩下的梅子好像還可以再釀個兩公升，最後又去附近的那種類似小北百貨的連鎖賣場扛了一瓶義大利制的玻璃瓶 (挑瓶子著實也花了點時間，因為架上大部分都是中國制的，會接觸到食物的東西感覺還是用好一點的比較安心) 來把這些傢伙通通變成梅酒 ！
而每款梅酒瓶上的可愛酒標是由 Emily 特別設計的。
飲酒過量，有害健康</description></item><item><title>My First Post</title><link>https://blog.wayne.wiki/blog/2021/06/my-first-post/</link><pubDate>Sat, 05 Jun 2021 12:23:20 +0800</pubDate><guid>https://blog.wayne.wiki/blog/2021/06/my-first-post/</guid><description>Hello World</description></item><item><title/><link>https://blog.wayne.wiki/blog/1/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.wayne.wiki/blog/1/01/</guid><description>+++ categories = [&amp;ldquo;AWS&amp;rdquo;] date = 2022-07-05T14:32:49Z description = &amp;ldquo;很多人敲碗已久的 Amazon Connect 終於開始提供台灣的電話號碼申請測試了&amp;rdquo; publishdate = 2022-07-01T03:16:19Z slug = &amp;ldquo;amazon-connect-taiwan-did-previw&amp;rdquo; tags = [&amp;ldquo;Amazon Connect&amp;rdquo;, &amp;ldquo;aws&amp;rdquo;] title = &amp;ldquo;Amazon Connect Taiwan DID number preview&amp;rdquo; [[images]] alt = &amp;ldquo;wil-stewart-unsplash&amp;rdquo; src = &amp;ldquo;/img/post/2022-07-05-wil-stewart-uerwoqeomrc-unsplash.jpg&amp;rdquo; stretch = &amp;ldquo;vertical&amp;rdquo;
+++
前情提要 去年就寫過一篇 blog 在介紹 Amazon Connect 這個在 AWS 上面所提供的雲端客服中心，但遺珠之憾是部分核心功能，像是 Contact Lens 這個透過 ML 技術來做到即時通話情緒分析和對話轉文字的功能不支援中文，另外還有一點就是一直沒有台灣的落地號碼，就算想要使用，也必須使用國外的電話號碼或是用電話轉接的方式來達成，在台灣的實用度並不高。
不過在 Q4'21 時這件事情開始有些好轉，首先是 Contact Lens 開始支援 Mandarin Chinese，雖然是以 Mainland China，也就是簡體中文為主，但稍微測試後發現對於台灣的口音在詞彙上的辨識還是在能讓人接受的水準。而針對不同行業可能有特定的術語，例如「躉繳」這類的產業特定名詞，也可以透過 Custom Vocabularies 的方式來訓練他，強化 Contact Lens 對於這類專有名詞的識別度。</description></item><item><title/><link>https://blog.wayne.wiki/blog/1/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.wayne.wiki/blog/1/01/</guid><description>+++ categories = [&amp;ldquo;AWS&amp;rdquo;] date = 2021-06-07T03:16:34Z description = &amp;ldquo;Amazon Connect 功能介紹，以及目前要在台灣使用可能會遇到的挑戰&amp;rdquo; publishdate = 2021-06-07T03:16:19Z slug = &amp;ldquo;amazon-connect-intro-and-challenges-in-taiwan&amp;rdquo; tags = [&amp;ldquo;Amazon Connect&amp;rdquo;, &amp;ldquo;aws&amp;rdquo;] title = &amp;ldquo;聊聊 Amazon Connect 與可能的應用場景&amp;rdquo; [[images]] alt = &amp;ldquo;Connect Logo&amp;rdquo; src = &amp;ldquo;/img/post/2021-06-09-screen-shot-2021-06-09-at-9-05-45-pm.png&amp;rdquo; stretch = &amp;quot;&amp;quot;
+++
Introduction Amazon Connect 其實也是個推出好幾年的服務了，不過他的應用情境比較偏向客服中心取向的產品，所以很多人可能都沒聽過他的名字，我也是前陣子與客戶討論起 Amazon Connect 的應用，才趕快惡補了一下關於這項服務的一些資訊。
但如果看過 Connect 的說明文件，也有稍微實際操作過的話，其實可以看得出來這項服務的野心很大，他提供的是一站式的客服中心，將傳統客服中心可能會遇到的痛點跟流程優化都整合了在這項產品之中。
另一方面，這項產品可以和許多後端的 AWS 服務整合，除了基本的客服中心功能之外，透過客服與客戶交談後所收集那些語音資料並整合 AWS 的其他服務串連起來，可以想像的空間很大，也是我覺得更有價值的部份。利用自然語言處理(Natural Language Processing, NLP) 來分析使用者的情緒，或是語音轉換文字(Speech-to-Text) 的技術將語音轉化成文字，後續可以做一些**資料探勘 (Data Mining)去發掘客戶的一些需求甚至包含使用者人物誌 (Persona)**的建立，對於企業經營或是行銷層面來說，可能都能夠幫助企業在數位轉型 (Digital Transformation)的過程中來更加了解你的客戶。
可能的應用場景會像是，客戶打電話到信用卡的客服中心尋求道路救援的服務，透過 NLP 的分析，我們可以更進一步發掘客戶潛在的需求，在用戶身上貼上不同的標籤，進而馬上推薦他購買汽車保險或是推薦一些汽車修護的廣告給他。這點其實蠻像我們現在在 google 上打關鍵字搜尋或是在 facebook 上點了什麼商品，接著就會收到很多相關商品的廣告推薦概念一樣。只不過現在除了你在網路上的數位足跡可以被拿來分析外，連大家原本認為的傳統電話客服，也可能變成這項資料來源的一部分。</description></item><item><title/><link>https://blog.wayne.wiki/blog/1/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.wayne.wiki/blog/1/01/</guid><description>+++ categories = [&amp;ldquo;AWS&amp;rdquo;] date = 2021-07-19T14:03:06Z description = &amp;ldquo;When an user pool is deleted on Amazon Cognito, it breaks Ground Truth private workforce&amp;rdquo; publishdate = 2021-06-07T03:16:19Z slug = &amp;quot;&amp;quot; tags = [&amp;ldquo;sagemaker&amp;rdquo;, &amp;ldquo;sagemaker-ground-truth&amp;rdquo;, &amp;ldquo;cognito&amp;rdquo;, &amp;ldquo;ground-truth-private-workforce&amp;rdquo;] title = &amp;ldquo;Broken private workforce on Amazon SageMaker Ground Truth&amp;rdquo; [[images]] alt = &amp;quot;&amp;quot; src = &amp;ldquo;/img/post/2021-07-19-sigmund-tnee6bdbc2m-unsplash.jpg&amp;rdquo; stretch = &amp;quot;&amp;quot;
+++ One day, I supported a workshop for Amazon SageMaker, obviously, Ground Truth is part of the course and we taught how users can leverage Ground Truth to label their data.</description></item><item><title/><link>https://blog.wayne.wiki/blog/1/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.wayne.wiki/blog/1/01/</guid><description>+++ categories = [] date = 2021-06-24T07:17:29Z description = &amp;quot;&amp;quot; draft = true images = [] publishdate = 2021-06-07T03:16:19Z slug = &amp;quot;&amp;quot; tags = [] title = &amp;ldquo;Introduce to Amazon Graviton 2&amp;rdquo;
+++</description></item><item><title/><link>https://blog.wayne.wiki/blog/1/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.wayne.wiki/blog/1/01/</guid><description>+++ categories = [] date = 2021-06-22T05:59:17Z description = &amp;quot;&amp;quot; draft = true images = [] publishdate = 2021-06-07T03:16:19Z slug = &amp;quot;&amp;quot; tags = [] title = &amp;ldquo;Navigating Compliance on AWS&amp;rdquo;
+++</description></item><item><title/><link>https://blog.wayne.wiki/blog/1/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.wayne.wiki/blog/1/01/</guid><description>+++ categories = [] date = 2021-07-05T13:24:09Z description = &amp;ldquo;本來以為 Work From Home 以後少了通勤時間，私人的時間應該會變多，但好像也不全然是如此&amp;rdquo; draft = true images = [] publishdate = 2021-06-07T03:16:19Z slug = &amp;quot;&amp;quot; tags = [] title = &amp;ldquo;Work From Home 後的生活變化&amp;rdquo;
+++</description></item></channel></rss>