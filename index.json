[{"title":"Auto-scaling process is slow on Amazon EKS with NLB","date":"","description":"Register target with target group is slow than expected behind the Network Load Balancer","body":"Background One of my customers wants to build the workloads on Amazon EKS, and plan to leverage Pod AutoScaler to automatically scale the number of pods in a deployment. The LoadBalancer type ahead the target group is NLB (Network Load Balancer) in their use case.\nIngress traffic to Amazon EKS Customer expects the registration flow of new target should be soon (less than one minute), but the real situation is that it takes minutes before the new provisioned Pod can start to serve traffic.\nMy gut feeling says it should not be so slow for a new Pod to become healthy status. At first, I have suspected it\u0026rsquo;s due to the health check interval is too high, so I checked with customer and they have already adjusted to the minimum interval, 10 seconds.\nLater I asked customer to open a support case to the support engineer team who can help to dig into the detail of AWS back-end service to know why the provisioned time is longer than expected.\nThe interesting thing is I suggested them to use ALB (Application Load Balancer), and don\u0026rsquo;t know why they switch to NLB on the architecture. Finally, I know the reason and they back to use ALB again, but it\u0026rsquo;s another story we can talk later.\nWhy ? As discussed with our support engineer, I realized it\u0026rsquo;s a known and current a limitation to NLB. But why does the process take so long time ? We can divide the the whole process into few steps,\nWhen a new target is registered to a Network Load Balancer, it would be stayed on initial state before complete and may be up to 180 seconds to finish. After registration is complete and the state become unhealthy, the Network Load Balancer health check systems start to send health checks to the target. Until the real health check data is gathered (depends on your health check interval and the threshold), your target will become healthy state and can start to service traffic. We can know the AWS health check systems don\u0026rsquo;t check your target at the beginning of registration, and the health checks will be started until the initial state is complete.\nFor example, if I configured the health check for a 30 seconds interval and required a healthy threshold of 3 to decide whether a target is healthy. It would take 3 * 30 = 90 seconds in the health check process. The worst case for a newly registered target could enter service taking 270 seconds (90 + 180 seconds). That means it would be over 4 minutes sometimes.\nSimilarly, it also happens on the de-registration process from NLB, so you need to take this into consideration.\nConclusion To my customer, it\u0026rsquo;s still better for them to use ALB under the scenario, so they finally switch back to ALB and ALB doesn\u0026rsquo;t have this kind of limitation. Based on the experiment between me and our support engineer, the process on ALB is less than 20 seconds, so I think it would be an expected case to me.\nIf you have to use NLB and want to avoid slow provision time on your EKS cluster, you can consider to scale your environment in advance and consider the provision time into your auto-scaling strategy.\nReference stackoverflow - AWS Network ELB take 4 minutes to recognise target as healthy Reddit - NLB slow to react to target group changes? ","ref":"/blog/2021/06/auto-scaling-process-is-slow-on-amazon-eks-with-nlb/"},{"title":"炸牛排初體驗","date":"","description":"日式酥炸牛排佐櫛瓜","body":"因為疫情關係，大概已經三個多禮拜沒出門了，出門也是種風險，所以頂多就一個星期出門個 1~2 次買一些生鮮蔬果，畢竟這東西沒辦法一次買很多冰著。朋友們的動態或是發文也大多都是今天又煮了些什麼，連 Facebook 的推薦廣告都充斥著賣肉或是賣海鮮的文宣。\n但對比我過往的日子，好像也沒有差太多，本來就有自己煮東西來吃的習慣， work from home 以後，少了通勤的時間，反而有更多的時間可以用來煮飯，也因為要減少出門，自己煮飯的頻率也變高了。\n在家煮飯還是盡量力求多變化，每一餐幾乎都是不同的食物，但有時候吃久了還是會懷念一些在餐廳才可以吃到、略微麻煩的食物，於是就誕生了這道日式炸牛排了。\n第一次吃到炸牛排是前幾個月疫情還沒爆發前的同事聚餐，那次吃了 A13 的炸牛元村，吃完後有點驚為天人的感覺，原來牛排用炸的也是挺好吃的，外層裹著一層麵包粉的酥脆外殼，但裡面又鮮嫩多汁，是兩種截然不同的口感。\n趁有空時，索性來研究一下怎麼在家炸牛排，看了幾份食譜後，其實也沒想像中的難，需要的材料就是牛排、麵粉、雞蛋跟麵包粉而已，除了麵包粉以外，上面這些食材應該都是很多家庭常備有的食物。而麵包粉其實在一般超市也挺好買到的，如果擔心買了用不完，也可以將一般土司烤脆了以後用食物調理機打碎，就變成好用的麵包粉了。\n這次用的肉是很便宜的嫩肩里肌，就是一般在好市多中可以看到中間有粗粗一條筋的那種牛排。如果是自己買整條回來切的話，一公斤才 300、400 元。這個部分如果好好分割的話，把筋膜跟中間的筋去掉，其實是可以變成一塊僅次於菲力柔軟的平鐵牛排 (flat iron steak)。\n開始炸牛排前，要先準備幾個可以容納下你牛排大小的容器，分別放入麵粉、蛋液以及麵包粉。然後就依序先沾一層薄薄的麵粉，接著稍微裹上一層蛋液後，再放入麵包粉中讓他沾上酥脆的外殼。沾麵包粉時要注意，沾完後不要急著要下油鍋炸，而是先讓他在旁靜置一下，讓麵包粉可以跟肉結合的更緊密。都有一鍋油了，總是要想辦法讓他效益最大化，當然順便炸個櫛瓜。櫛瓜只需要裹上蛋液跟麵粉就好了，不需要額外的麵包粉，櫛瓜用炸的真的無敵霹靂好吃，酥脆的麵衣，裡面是熟透的多汁柔軟。牛排吃起來感覺跟外面賣的炸牛排吃起來也沒相差太多，看來可以變成家常菜了。\n整道料理最麻煩的東西我會說是那鍋油，畢竟在一般家庭中不會常常在炸東西，那鍋油只用一次也浪費，而用完後要如何處理更是麻煩。但幾年前在大創發現了一個好物，叫做廢油處理劑，49 元裡面好像有 4 ~ 5 包可以用。在炸完東西趁油還熱時把這個東西倒進去攪一攪，等油冷掉以後他會變成一大塊類似肥皂的白色物體，接著就可以把整塊挖出來丟進垃圾桶了。\n","ref":"/blog/2021/06/japan-style-fried-steak/"},{"title":"淺漬梅酒","date":"","description":"淺漬梅酒製作心得","body":"今年不知道看到了什麼，突然就想做個淺漬梅酒，為了泡酒，還特別研究了一下各種瓶子的差異，最後決定買了星硝(Seisho) 的玻璃提瓶，不過台灣都很貴，就直接從日亞下單了，加上運費還比台灣便宜一些。\n梅子的部份，今年聽說因為台灣沒什麼下雨，所以梅子也都特別小顆，單價上也比較高。在網路上找了一下，價格從 40 幾到 100 多塊都有看到。不過因為泡的量也不大，最後選擇了一間價格相對高 (95元/斤)，但是評價不錯的店買了 7 斤來泡酒。收到時是覺得品項還不錯啦，但貴是不是有貴的價值，只能等釀好才知道了。 Wines 這次用的酒有 Vodka、Whisky、Sake 以及 Gin。當中最貴的應該就那瓶 Roku Gin 了，一瓶 700ml 要價快 800 元。Roku Gin 跟另一瓶好市多最便宜的 Gin 相比之下，在香氣的確是不一樣，雖然還是可以聞到濃烈的酒精味，但可以喝得出來這瓶酒當初在釀的時候的確有花了一點功夫。官網上的介紹是這樣說的 ROKU在日文裡代表著「六」，六（ROKU）使用了6種經典的日本植物：櫻花、櫻花葉、日本柚子皮、煎茶、玉露，日本山椒。應該會是個純飲也很厲害的酒，只是被拿來釀梅酒就不知道會不會太浪費了。\n結果釀完 4.5 桶酒後，發現剩下的梅子好像還可以再釀個兩公升，最後又去附近的那種類似小北百貨的連鎖賣場扛了一瓶義大利制的玻璃瓶 (挑瓶子著實也花了點時間，因為架上大部分都是中國制的，會接觸到食物的東西感覺還是用好一點的比較安心) 來把這些傢伙通通變成梅酒 ！\n而每款梅酒瓶上的可愛酒標是由 Emily 特別設計的。\n飲酒過量，有害健康 ","ref":"/blog/2021/06/home-made-umeshu/"},{"title":"About","date":"","description":"Let's talk more stories about me. ","body":"\nHowdy, Welcome to my blog !!\nIt\u0026rsquo;s been a long time since I last wrote a blog, but now I plan to use here to record my daily life such as the food I cooked or places I visited, and finally the technologies I used on the job.\nCareer I started my career as a DevOps for years, then I switch my role to Backend Engineer and Data Engineer later, especially in E-Commerce and IoT domains.\nAfter that, I joined many different startups, and help those companies to build product from zero to one. Before my last few year in startup company, I start to recruit my own team, define the technology roadmap of the whole company and focus more on business strategy and the market. I must say It\u0026rsquo;s interesting and a totally new experience to the one who was a software engineer.\nNow I am a Solutions Architect focusing on architecture design and help enterprise to solve the problems on the process of Digital Transformation.\nLife I really like to try new things in my daily life. After getting my license when I turned 18, I ride to different places and captured the views with my camera. Sit by the ocean side and listen to the ocean waves is help to relax myself. Few years ago, I got another motorcycle license that allows me make longer ride to the beautiful scenery in Taiwan and enjoy the speed (under speed limit of course).\nI really like to try new things in my daily life. From my getting my license on eighteen years old, I usually ride my scooter to visit different places and take photos. I think it\u0026rsquo;s way to relax yourself and sometime I would just sit by the sea and listen to the lap of the waves against the rocks. Few years ago, I decide to take another license, so that I can ride a motorcycle in Taiwan.\nBesides, everyone like delicious foods and I am no exception. I’m not only enjoy good food, I also enjoy cooking and baking in my free time. Explore and challenge myself with new recipes is also one of my hobbies.\nTo me, I would life is important and the job is the way you make the money to let you enjoy the life.\nBeef tongue Grilled Lamb Chops Steak Canelé ","ref":"/about/"},{"title":"My First Post","date":"","description":"","body":"Hello World\n","ref":"/blog/2021/06/my-first-post/"},{"title":"","date":"","description":"","body":"+++ categories = [\u0026ldquo;AWS\u0026rdquo;] date = 2022-07-05T14:32:49Z description = \u0026ldquo;很多人敲碗已久的 Amazon Connect 終於開始提供台灣的電話號碼申請測試了\u0026rdquo; publishdate = 2022-07-01T03:16:19Z slug = \u0026ldquo;amazon-connect-taiwan-did-previw\u0026rdquo; tags = [\u0026ldquo;Amazon Connect\u0026rdquo;, \u0026ldquo;aws\u0026rdquo;] title = \u0026ldquo;Amazon Connect Taiwan DID number preview\u0026rdquo; [[images]] alt = \u0026ldquo;wil-stewart-unsplash\u0026rdquo; src = \u0026ldquo;/img/post/2022-07-05-wil-stewart-uerwoqeomrc-unsplash.jpg\u0026rdquo; stretch = \u0026ldquo;vertical\u0026rdquo;\n+++\n前情提要 去年就寫過一篇 blog 在介紹 Amazon Connect 這個在 AWS 上面所提供的雲端客服中心，但遺珠之憾是部分核心功能，像是 Contact Lens 這個透過 ML 技術來做到即時通話情緒分析和對話轉文字的功能不支援中文，另外還有一點就是一直沒有台灣的落地號碼，就算想要使用，也必須使用國外的電話號碼或是用電話轉接的方式來達成，在台灣的實用度並不高。\n不過在 Q4'21 時這件事情開始有些好轉，首先是 Contact Lens 開始支援 Mandarin Chinese，雖然是以 Mainland China，也就是簡體中文為主，但稍微測試後發現對於台灣的口音在詞彙上的辨識還是在能讓人接受的水準。而針對不同行業可能有特定的術語，例如「躉繳」這類的產業特定名詞，也可以透過 Custom Vocabularies 的方式來訓練他，強化 Contact Lens 對於這類專有名詞的識別度。\nDID number preview 許多人一直在問的台灣當地電話號碼，經過一年多以來與內部團隊的溝通及努力，也終於準備要開始落地了，在 2022 年 6 月份時開始提供 preview 了，目前有 DID 跟 Toll-Free 兩種號碼可供申請。由於還在測試階段，所以是沒辦法直接在 Amazon Connect 的 Instance Console 選取到台灣的電話號碼的，有興趣的人可以透過開 support case 的方式來申請 Taiwan DID number 的 preview program，整個流程可能會需要花費幾天時間，期間也會被要求提供一些地址或是公司註冊資訊等等。如果對於開 support case 不熟悉的人，也可以參考這份文件，手把手的教你如何 step-by-step 的完成台灣電話號碼的申請。\n另外要注意的是，假設你的 Connect Instance 是新開的，就算你取得了一組台灣 DID number，但在 Contact Control Panel (CCP) 介面中，預設應該是沒辦法撥打台灣的電話號碼的，也需要開一張 support case，請 AWS 的 support engineer 協助你開啟這個功能，這樣你就可以從 CCP 中撥打到台灣的電話號碼了。\n實際上申請後會拿到一組區碼是 02 開頭的電話號碼，將對應的 Contact Flow 綁訂到這組號碼後，就可以直接透過打這隻電話進入 Amazon Connect 中的客服流程。而如果透過 CCP 來撥號到手機門號，也會發現是由這隻配發到的號碼所打來的，美中不足的是現在顯示的號碼除了 02 的區碼外，還會包含國碼，所以實際在手機上看到的電話號碼會是 +886-2-12345678 這樣子的形式，似乎會比較容易被誤認為詐騙電話號碼，希望這個問題只是在 preview 時暫時性存在的問題。\n整體使用起來體驗蠻不錯的，雖然 Amazon Connect 是一個 Cloud based 的服務，但在幾次通話測試中，不會像使用一些 VoIP 的服務一樣，會有一些斷斷續續或是通話延遲的情況發生，就看什麼時候能夠正式 GA 了，後續應該陸陸續續也會有一些更明朗的資訊出來，像是否支援號碼可攜以及通話費率會如何計算。\nReference Custom Vocabularies How to apply taiwan phone number Contact Lens for Amazon Connect adds support for 8 languages ","ref":"/blog/1/01/"},{"title":"","date":"","description":"","body":"+++ categories = [\u0026ldquo;AWS\u0026rdquo;] date = 2021-06-07T03:16:34Z description = \u0026ldquo;Amazon Connect 功能介紹，以及目前要在台灣使用可能會遇到的挑戰\u0026rdquo; publishdate = 2021-06-07T03:16:19Z slug = \u0026ldquo;amazon-connect-intro-and-challenges-in-taiwan\u0026rdquo; tags = [\u0026ldquo;Amazon Connect\u0026rdquo;, \u0026ldquo;aws\u0026rdquo;] title = \u0026ldquo;聊聊 Amazon Connect 與可能的應用場景\u0026rdquo; [[images]] alt = \u0026ldquo;Connect Logo\u0026rdquo; src = \u0026ldquo;/img/post/2021-06-09-screen-shot-2021-06-09-at-9-05-45-pm.png\u0026rdquo; stretch = \u0026quot;\u0026quot;\n+++\nIntroduction Amazon Connect 其實也是個推出好幾年的服務了，不過他的應用情境比較偏向客服中心取向的產品，所以很多人可能都沒聽過他的名字，我也是前陣子與客戶討論起 Amazon Connect 的應用，才趕快惡補了一下關於這項服務的一些資訊。\n但如果看過 Connect 的說明文件，也有稍微實際操作過的話，其實可以看得出來這項服務的野心很大，他提供的是一站式的客服中心，將傳統客服中心可能會遇到的痛點跟流程優化都整合了在這項產品之中。\n另一方面，這項產品可以和許多後端的 AWS 服務整合，除了基本的客服中心功能之外，透過客服與客戶交談後所收集那些語音資料並整合 AWS 的其他服務串連起來，可以想像的空間很大，也是我覺得更有價值的部份。利用自然語言處理(Natural Language Processing, NLP) 來分析使用者的情緒，或是語音轉換文字(Speech-to-Text) 的技術將語音轉化成文字，後續可以做一些**資料探勘 (Data Mining)去發掘客戶的一些需求甚至包含使用者人物誌 (Persona)**的建立，對於企業經營或是行銷層面來說，可能都能夠幫助企業在數位轉型 (Digital Transformation)的過程中來更加了解你的客戶。\n可能的應用場景會像是，客戶打電話到信用卡的客服中心尋求道路救援的服務，透過 NLP 的分析，我們可以更進一步發掘客戶潛在的需求，在用戶身上貼上不同的標籤，進而馬上推薦他購買汽車保險或是推薦一些汽車修護的廣告給他。這點其實蠻像我們現在在 google 上打關鍵字搜尋或是在 facebook 上點了什麼商品，接著就會收到很多相關商品的廣告推薦概念一樣。只不過現在除了你在網路上的數位足跡可以被拿來分析外，連大家原本認為的傳統電話客服，也可能變成這項資料來源的一部分。\n接著讓我們來來談談 Amazon Connect 的幾項核心功能，除了基本的客服中心的語音通話功能外，從上面這張圖可以看到這其實就是一日客服中所會遭遇到的一些可能情況，而 Connect 旨在協助客服們減輕工作中繁瑣跟麻煩的地方。\n他整合了幾項功能，來協助客服做到端到端的解決方案。\nAmazon Connect Voice ID 大家可以想像一般我們打去銀行或是信用卡客服，他都會問一些你個人的資訊像是身分證字號、畢業學校或是最近的一筆交易是什麼來驗證打電話來的是不是本人，而 Voice ID 正是協助大家做這些事情的。\n原理是透過客戶在打電話時，同意客服在系統中登錄他的聲紋 (voiceprint)，來達到之後打電話時系統可以直接透過比對資料庫中的資訊來確認是不是本人打來的。\n可能有人會擔心那這樣是不是有機會被盜用，那其實可以把這個功能當做一個輔助驗證的工具，客服可以根據系統給出來的信心指數決定是不是要再問客戶其他問題來辨識這個人的身分\nAmazon Customer Profiles 相信大家都有這樣的經驗，打電話去客服時，有時候問了一個問題後，客服就會跟你說稍等一下，他要查一下資料，然後把你轉去聽背景音樂。其實這個步驟有時候會花一點時間，使用者體驗來說並不是很好。而對於客服人員來說，每天可能必須在電腦中重複輸入上百次不同的名字或是身分證字號來得到眼前這位客戶的基本資訊。有可能公司內有多個系統，還要去不同系統中才能查到所有的資訊，這是一個繁瑣又乏味的過程，為什麼不能夠過自動化的方式來進行呢 ？\nCustomer Profiles 就是想協助客服減少這些操作性的工作，提供一個整合式的客戶資訊頁面，讓你可以串接公司內部的 CRM 或是各種資訊系統，讓客戶的資訊可以在一個頁面中呈現出來。透過搭配 Voice ID，更可以在第一時間就自動化的將客戶資訊帶入。\nContact Lens for Amazon Connect Contact Lens 其實就像是他名稱上的意義，是一面協助客服了解客戶的透鏡 (Lens)，如果不是經驗老道的客服人員，有時候很難從與客戶的對話中聽出來客戶可能不開心了，或是你的回答其實對於他沒有幫助。\nContacts Lens 藉由自然語言理解 (Natural Language Understanding, NLU) 的技術，來即時的分析客服與客戶的對話，進而了解客戶是不是其實有些不耐煩了，可能需要尋求客服主管來提供更進一步的協助。而也可以透過通知的方式主動提醒客服主管可能需要介入處理。\n而這些語音資訊也會被存到 Amazon S3 中，可以供公司進一步的去做分析，截取出當中有用的資訊作為後續行銷或是分析使用。\nAmazon Connect Wisdom Connect Wisdom 就我自己看來，我會把它看做是一個客服知識庫，透過機器學習的方式提供更聰明的搜尋結果與可能的關聯問題，來提供客服一些常見問題的答案，協助線上客服迅速可以找到適合的答案回覆給客戶。\n這項功能同時也是可以公司整合其他第三方系統或是內部的資料庫來提供更多元的客服知識庫。客服同時也可以對這些答案進行評分，來提高答案的可信度。\nAmazon Connect Tasks 客戶打電話進來詢問的問題有時候並不是能夠立即給予答案的，可能需要更進一步的釐清或是作業時間。對於每日要接上數百通電話的客服人員來說，要追蹤這些待辦事項的進展或是狀況可能不是那麼容易，如果中間轉過很多手人員，可能也很難得知完整的資訊。\nTasks 正是為客服人員提供一個類似任務管理系統的功能，讓一件任務從一開始到最後都能夠很容易的被追蹤以及管理，客服人員也可以依照任務的優先程度來決定什麼事情必須先被處理，避免有掉球的情況發生。\nChallenges in Taiwan 乍看之下，Amazon Connect 提供的功能似乎很完美，提供了所有端到端 (End-to-End) 的客服系統功能。是不是直接把我原本的客服系統全部搬到雲端上就解決了，在某些國家可能的確是如此，但目前在台灣還是有一些限制。\nAmazon Connect 目前在台灣並沒有提供台灣的本地號碼 (Local Number)，也就是說無論是你打給客戶，或是客戶想打給你，都沒有辦法直接撥台灣的電話，而是可能要透過一個美國或是香港的電話號碼。第二個問題是前面提到的蠻多功能其實都不支援正體中文的，所以在台灣其實並沒有這麼的好用。\nUse Case 看到這邊大家一定會疑惑，既沒有本地號碼，也不支援中文，那這個東西還有辦法在台灣落地或是使用嗎 ?\n其實 Amazon Connect 提供的不只電話語音的功能而已，他還提供了線上 Chat 的功能，大家應該常有看過一些網站會提供線上意見回饋表或是客服信箱，但這些往往很不即時，你可能要等個幾個小時甚至好幾天才會得到回覆。或是現在有些網站會提供官方 Line 或是 Facebook messenger 帳號，請你透過這跟他們聯絡，但這對於使用者來說要切來切去的還是有些不便。另外對於公司來說，要同時管理這麼多個管道來的訊息其實也不是很容易。\n透過 Connect 可以即時在網站上嵌入一個線上聊天室，讓客戶可以直接與後台人員聯繫，而如果想減輕第一線客服人員的負擔，也可以串連第三方的聊天機器人 (Chatbot) 來減少需要直接有人回答的問題數量。\nConnect 也可以整合 AWS Marketplace 上的產品，目前也有許多廠商在上面提供各式各樣的解決方案，而在華文解決方案的這塊領域上，相對還是比較匱乏的，如果目前公司有在發展華文的一些自然語言處理或是分析的解決方案，可以將現有的解決方案與 Amazon Connect 做整合，提早搶入這塊還處於真空狀態的市場。\n另外，我也有看過一個比較特別的應用方式，透過 Amazon Connect 來串連公司的 alert 系統，在系統發生狀況時，透過事先定義的 call tree 自動打給不同 tier 的 on-call 人員，來即時通知達到告警的效果。\n","ref":"/blog/1/01/"},{"title":"","date":"","description":"","body":"+++ categories = [\u0026ldquo;AWS\u0026rdquo;] date = 2021-07-19T14:03:06Z description = \u0026ldquo;When an user pool is deleted on Amazon Cognito, it breaks Ground Truth private workforce\u0026rdquo; publishdate = 2021-06-07T03:16:19Z slug = \u0026quot;\u0026quot; tags = [\u0026ldquo;sagemaker\u0026rdquo;, \u0026ldquo;sagemaker-ground-truth\u0026rdquo;, \u0026ldquo;cognito\u0026rdquo;, \u0026ldquo;ground-truth-private-workforce\u0026rdquo;] title = \u0026ldquo;Broken private workforce on Amazon SageMaker Ground Truth\u0026rdquo; [[images]] alt = \u0026quot;\u0026quot; src = \u0026ldquo;/img/post/2021-07-19-sigmund-tnee6bdbc2m-unsplash.jpg\u0026rdquo; stretch = \u0026quot;\u0026quot;\n+++ One day, I supported a workshop for Amazon SageMaker, obviously, Ground Truth is part of the course and we taught how users can leverage Ground Truth to label their data.\nParticipants were guided to setup their Private Workforce in Ground Truth, but somehow an user reported that they neither receive the invitation mail which is sent from Ground Truth to provide a temporary password for the workers to start the labeling job nor get the password reset mail.\nThe first idea comes to my mind is to rebuild Cognito User Pool for Ground Truth Private workforce, and I try to delete the Cognito User Pool without any problems on Cognito service page.\nHowever, when I went back to Ground Truth UI, I got this error \u0026ldquo;400 ResourceNotFoundException: User pool ap-northeast-1_0mDKPv4vW does not exist. Request ID: 2cd94004-91a3-4d70-b98c-6b15c5c723cb\u0026rdquo;. I can\u0026rsquo;t create a new User Pool or delete the private workforce to rebuild a new one on the UI.\nI try to google and search it on stackoverflow, and I can see some answers about Cognito itself but it has no clue on how to fix this problem for Ground Truth. I even start to think whether I need to create a support ticket to seek the help from support engineer.\nFinally, I know how to fix the issue, and it\u0026rsquo;s not that difficult to resolve it. Ground Truth UI doesn\u0026rsquo;t provide this kind of function to let you delete the default workforce, and you can do nothing there. BUT you can achieve this through AWS CLI.\naws sagemaker delete-workforce --workforce-name default This cleans your slate and you should create a new work team to continue !\n","ref":"/blog/1/01/"},{"title":"","date":"","description":"","body":"+++ categories = [] date = 2021-06-24T07:17:29Z description = \u0026quot;\u0026quot; draft = true images = [] publishdate = 2021-06-07T03:16:19Z slug = \u0026quot;\u0026quot; tags = [] title = \u0026ldquo;Introduce to Amazon Graviton 2\u0026rdquo;\n+++\n","ref":"/blog/1/01/"},{"title":"","date":"","description":"","body":"+++ categories = [] date = 2021-06-22T05:59:17Z description = \u0026quot;\u0026quot; draft = true images = [] publishdate = 2021-06-07T03:16:19Z slug = \u0026quot;\u0026quot; tags = [] title = \u0026ldquo;Navigating Compliance on AWS\u0026rdquo;\n+++\n","ref":"/blog/1/01/"},{"title":"","date":"","description":"","body":"+++ categories = [] date = 2021-07-05T13:24:09Z description = \u0026ldquo;本來以為 Work From Home 以後少了通勤時間，私人的時間應該會變多，但好像也不全然是如此\u0026rdquo; draft = true images = [] publishdate = 2021-06-07T03:16:19Z slug = \u0026quot;\u0026quot; tags = [] title = \u0026ldquo;Work From Home 後的生活變化\u0026rdquo;\n+++\n","ref":"/blog/1/01/"},{"title":"Contact","date":"","description":"","body":"","ref":"/contact/"}]